#!/usr/bin/python

import argparse
import time
import re
import platform
from socket import gethostname
import os
import subprocess
import ConfigParser as configparser
import abc
from lxml import etree

try:
	from colorama import init as coloramainit, Fore, Style

	coloramainit()
except:
	pass

argparser = argparse.ArgumentParser();
argparser.add_argument("-n", "--newBuild", action = 'store_true');
argparser.add_argument("--format", "-f", default = "ini", choices = ["ini"]);
argparser.add_argument("--platform", default = None)
argparser.add_argument("--incrementMajor", action = 'store_true')
argparser.add_argument("--incrementMinor", action = 'store_true')
argparser.add_argument("-d", "--debug", action = 'store_true')
argparser.add_argument("-k", "--key", help = "print the value of just one key")
argparser.add_argument("-K", "--keySearch", help = "print the values where the key matches this search term")
argparser.add_argument("-w", "--filename", default = ".buildid")
argparser.add_argument("-q", "--quiet", action = 'store_true')
argparser.add_argument("-p", "--plain", action = "store_true")
args = argparser.parse_args()

configDefaults = {
	"title": "Untitled Project"
}

cfgparser = configparser.ConfigParser(defaults = configDefaults)
cfgparser.add_section("project")
cfgparser.read("buildid.cfg");

def parseVersionTranslator(config):
	translator = config["translator"]

	if translator == "PlainFile":
		inst = VersionTranslatorPlainFile(config)

class VersionReader():
	def name(self):
		return self.__class__.__name__

	def isReadable(self):
		return True

	@abc.abstractmethod
	def read(self):
		pass

class VersionWriter():
	@abc.abstractmethod
	def write():
		pass

class VersionTranslatorPlainFile(VersionReader, VersionWriter):
	def __init__(self, config = None):
		pass
#		print config

	def read(self):
		version = zeroVersion()
	
		try:
			versionFile = open('VERSION', 'r')
			content = versionFile.read()
			versionFile.close()

			version = parseVersion(content)
		except IOError as e:
			pass
		except Exception as e:
			print(e)

		return version

	def write():
		f = open("VERSION", "w")
		f.write(getVersionFormattedGnu(version))
		f.close()

	def isReadable(self):
		return os.path.exists("VERSION")

class VersionTranslatorPomFile(VersionReader):
	def isReadble(self):
		return os.path.exists("pom.xml")

	def read(self):
		version = zeroVersion()

		try:
			version = reallyCheekyXpath("pom.xml", "//project/version/text()")[0]
			version = parseVersion(version)
		except:
			pass

		return version

def parseVersion(versionString):
	version = zeroVersion()

	m = re.search("(\d+)\.(\d+)\.(\d+)[\.-]*(\d*)", versionString)

	if m != None:
		version['major'] = int(m.group(1))
		version['minor'] = int(m.group(2))
		version['revision'] = int(m.group(3))
		version['release'] = m.group(4)
	elif args.debug:
		print("VERSION file did not match regex.")

	return version

def zeroVersion():
	return {
		"major": 0,
		"minor": 0,
		"revision": 0,
		"release": ''
	}

def reallyCheekyXpath(filename, xpath):
	f = open(filename, "r")
	xml = f.read()
	f.close()

	# aherm
	xml = re.sub('xmlns=".+"', "", xml)

	pomTree = etree.fromstring(xml)
	res = pomTree.xpath(xpath)

	return res

versionReaders = [ VersionTranslatorPlainFile(), VersionTranslatorPomFile() ]
versionWriters = [ VersionTranslatorPlainFile() ]

def printWarn(message):
	printPrefix("WARN", message, 3)

def printInfo(message):
	printPrefix("INFO", message, 4)

def printPrefix(prefix, message, color = None):
	startColor = ""
	endColor = ""

	if hasColors():
		if color == 3:
			startColor = Style.BRIGHT + Fore.MAGENTA
			endColor = Style.RESET_ALL

		if color == 4: 
			startColor = Style.BRIGHT + Fore.BLUE
			endColor = Style.RESET_ALL

	print("[" + startColor + prefix + endColor + "] " + message);

def hasColors():
	hasColors = True 

	try: 
		if Fore.BLACK:
			pass
	except:
		hasColors = False

	if args.plain:
		hasColors = False

	return hasColors

class BuildIdFileHandler:
	def getFilename(self):
		if args.filename == ".buildid":
			return self.getDefaultFilename()
		else:
			return args.filename

	def getDefaultFilename(self):
		return args.filename
	
	def fileExists(self):
		return os.path.exists(self.getFilename())

	def toString(self):
		raise NotImplementedError()

	def read(self):
		pass
		#raise NotImplementedError()

	def write(self, properties):
		handle = open(self.getFilename(), "w");
		handle.write(self.toString());
		handle.close()

class BuildIdFileHandlerIni(BuildIdFileHandler):
	def getDefaultFilename(self):
		return ".buildid"

	def toString(self):
		buf = ""
		for key in sorted(properties):
			buf += self.toStringSingle(key) + "\n"

		return buf.strip()

	def toStringSingle(self, key):
		return (key + "=" + str(properties[key]))


	def read(self):
		properties = dict()

		content = open(self.getFilename(), 'r').readlines()

		for line in content:
			key, value = line.strip().split("=");
			
			properties[key] = value

		return properties

fileHandlers = {
	"ini": BuildIdFileHandlerIni(),
}

def getVersionFromReaders():
	for reader in versionReaders:
		if reader.isReadable():
			versionFromReader = reader.read()

			printInfo("Reading version using: " + reader.name() + " = " + getVersionFormattedGnu(versionFromReader))

			return versionFromReader # first one only at the mo

def runCommand(cmd):
	process = subprocess.Popen(cmd, shell = True, stdout=subprocess.PIPE)
	output = "".join(process.stdout.readlines()).strip()

	return output

def checkGitIgnore():
	if not os.path.exists(".gitignore"):
		return 

	gitIgnoreFile = open(".gitignore", 'r');

	content = gitIgnoreFile.read()

	if "buildid" not in content:
		printWarn("You should ignore your buildid in .gitignore.")

	gitIgnoreFile.close()


def isGit():
	checkGitIgnore();
		
	return os.path.exists(".git")

def getGitRevision():
	return runCommand("git rev-parse HEAD")

def getGitBranch():
	return runCommand("git branch | awk '{print $2}'")

def isEmpty(value):
	if value == None:
		return True

	if value == 0:
		return True

	if value == '':
		return True

	return False

def getVersionFormattedShort(version):
	return str(version['major']) + "." + str(version["minor"]) + "." + str(version['revision'])

def getVersionFormattedGnu(version):
	if isEmpty(version['release']):
		rel = ''
	else:
		rel = '-' + str(version['release'])

	return str(version['major']) + "." + str(version["minor"]) + "." + str(version['revision']) + rel

def getVersionFormattedWin(version):
	if isEmpty(version['release']):
		rel = '.0';
	else:
		rel = '.' + str(version['release'])

	return str(version['major']) + "." + str(version["minor"]) + "." + str(version['revision']) + rel

def getPlatform():
	if args.platform != None:
		return args.platform
	else:
		return "linux"

def getVersionFormattedPlatform():
	return getVersionFormattedGnu(version)

def getCommitTag():
	if isGit():
		return getGitRevision()
	else:
		return '00000'

def isReleaseBuild():
	return False

def getSourceTag():
	if isReleaseBuild() and isEverythingCommited():
		return getCommitTag()
	else:
		return properties['timestamp']

def getPackageTag():
	return getVersionFormattedPlatform() + "-" + getSourceTag()

def isEverythingCommited():
	return False

def saveVersion():
	for writer in versionWriters:
		writer.write(getVersionFormattedGnu(version))

def buildProperties():
	properties["timestamp"] = str(int(time.time()))

	properties["version.major"] = version['major']
	properties["version.minor"] = version['minor']
	properties["version.release"] = version['release']
	properties["version.revision"] = version['revision']
	properties["version.formatted.gnu"] = getVersionFormattedGnu(version)
	properties["version.formatted.short"] = getVersionFormattedShort(version)
	properties["version.formatted.win"] = getVersionFormattedWin(version)
	properties["tag"] = getPackageTag()
	properties["buildhost.platform"] = platform.platform()
	properties["buildhost.system"] = platform.system()
	properties["buildhost.release"] = platform.release()
	properties["buildhost.version"] = platform.version()
	properties["buildhost.hostname"] = gethostname()

	if isGit():
		properties["git.branch"] = getGitBranch()
		properties["git.revision"] = getGitRevision();
		properties["git.revision.short"] = getGitRevision()[0:7];

	properties["project.title"] = cfgparser.get("project", "title")

	return properties

################################################################################

for section in cfgparser.sections():
	if cfgparser.has_option(section, "type"):
		typeOfThing = cfgparser.get(section, "type")

		translatorConfig = dict()
		
		for cfg in cfgparser.items(section):
			translatorConfig[cfg[0]] = cfg[1]

		inst = parseVersionTranslator(translatorConfig)

		if inst is VersionReader:
			versionReaders.append(reader)

		if inst is VersionWriter:
			versionWriters.append(writer)

if args.incrementMajor:
	version['major'] = version['major'] + 1
	saveVersion()

if args.incrementMinor:
	version['minor'] = version['minor'] + 1
	saveVersion()

properties = dict()
handler = fileHandlers[args.format]

if args.newBuild:
	version = getVersionFromReaders()

	handler.write(buildProperties());

	printInfo("Wrote file: " + handler.getFilename() + ". View the file or jst run `buildid` again to see all the properties.");

else:
	if not handler.fileExists():
		printInfo("There is no buildid file. Use -n to create a new build.")
	else:
		properties = handler.read()

		if args.key:
			if args.key in properties:
				print(properties[args.key])
			else: 
				print(args.key + " was not found.");
		elif args.keySearch:
			for key in properties:
				if args.keySearch in key:
					print(handler.toStringSingle(key))
		else:
			if not args.quiet:
				printInfo("Printing buildid from file: " + handler.getFilename())
				printInfo("You can output a single property with -k <property-name>")
				printInfo("or see all these properties again without this message with -q");
				print("")

			print(handler.toString())
