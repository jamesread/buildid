#!/usr/bin/python3

import argparse
import time
import re
import platform
from socket import gethostname
import os
import subprocess
import configparser

argparser = argparse.ArgumentParser();
argparser.add_argument("-n", "--newBuild", action = 'store_true');
argparser.add_argument("--format", "-f", default = "ini", choices = ["ini", "json"]);
argparser.add_argument("--platform", default = None)
argparser.add_argument("--incrementMajor", action = 'store_true')
argparser.add_argument("--incrementMinor", action = 'store_true')
argparser.add_argument("-d", "--debug", action = 'store_true')
argparser.add_argument("-k", "--key", help = "print the value of just one key")
argparser.add_argument("-w", "--filename", default = ".buildid")
argparser.add_argument("-q", "--quiet", action = 'store_true')
args = argparser.parse_args()

configDefaults = {
	"title": "Untitled Project"
}

cfgparser = configparser.ConfigParser(defaults = configDefaults)
cfgparser.add_section("project")
cfgparser.read("buildid.cfg");

def printWarning(message):
	print("[WARN] " + message);

def printInfo(message):
	print("[INFO] " + message);

class BuildIdFileHandler:
	def getFilename(self):
		if args.filename == ".buildid":
			return self.getDefaultFilename()
		else:
			return args.filename

	def getDefaultFilename(self):
		return args.filename
	
	def fileExists(self):
		return os.path.exists(self.getFilename())

	def toString(self):
		raise NotImplementedError()

	def read(self):
		pass
		#raise NotImplementedError()

	def write(self, properties):
		handle = open(self.getFilename(), "w");
		handle.write(self.toString());
		handle.close()

class BuildIdFileHandlerIni(BuildIdFileHandler):
	def getDefaultFilename(self):
		return ".buildid.ini"

	def toString(self):
		buf = ""
		for key in sorted(properties):
			buf += (key + "=" + str(properties[key])) + "\n"

		return buf.strip()

	def read(self):
		properties = dict()

		content = open(self.getFilename(), 'r').readlines()

		for line in content:
			key, value = line.strip().split("=");
			
			properties[key] = value

		return properties

fileHandlers = {
	"ini": BuildIdFileHandlerIni(),
}

def getVersion():
	version = {
		"major": 0,
		"minor": 0,
		"revision": 0,
		"release": ''
	}

	try:
		versionFile = open('VERSION', 'r')
		content = versionFile.read()
		versionFile.close()

		m = re.search("(\d).(\d).(\d)-?(.+?)", content)

		if m != None:
			version['major'] = int(m.group(1))
			version['minor'] = int(m.group(2))
			version['revision'] = int(m.group(3))
			version['release'] = m.group(4)
		elif args.debug:
			print("VERSION file did not match regex.")
	except Exception as e:
		print(e)

	return version

def runCommand(cmd):
	output = subprocess.Popen(cmd.split(" "), stdout=subprocess.PIPE).communicate()[0]
	output = output.strip().decode("utf-8")
	return output

def checkGitIgnore():
	gitIgnoreFile = open(".gitignore", 'r');

	content = gitIgnoreFile.read()

	if "buildid" not in content:
		printWarning("You should ignore your buildid in .gitignore.")

	gitIgnoreFile.close()


def isGit():
	checkGitIgnore();
		
	return os.path.exists(".git")

def getGitRevision():
	return runCommand("git rev-parse HEAD")

def isEmpty(value):
	if value == None:
		return True

	if value == 0:
		return True

	if value == '':
		return True

	return False

def getVersionFormattedGnu(version):
	if isEmpty(version['release']):
		rel = ''
	else:
		rel = '-' + str(version['release'])

	return str(version['major']) + "." + str(version["minor"]) + "." + str(version['revision']) + rel

def getVersionFormattedWin(version):
	if isEmpty(version['release']):
		rel = '.0';
	else:
		rel = '.' + str(version['release'])

	return str(version['major']) + "." + str(version["minor"]) + "." + str(version['revision']) + rel

def getPlatform():
	if args.platform != None:
		return args.platform
	else:
		return "linux"

def getVersionFormattedPlatform():
	return getVersionFormattedGnu(version)

def getCommitTag():
	if isGit():
		return getGitRevision()
	else:
		return '00000'

def isReleaseBuild():
	return False

def getSourceTag():
	if isReleaseBuild() and isEverythingCommited():
		return getCommitTag()
	else:
		return properties['timestamp']

def getPackageTag():
	return getVersionFormattedPlatform() + "-" + getSourceTag()

def isEverythingCommited():
	return False

def saveVersion():
	f = open("VERSION", "w")
	f.write(getVersionFormattedGnu(version))
	f.close()

def buildProperties():
	properties["timestamp"] = str(int(time.time()))

	properties["version.major"] = version['major']
	properties["version.minor"] = version['minor']
	properties["version.release"] = version['release']
	properties["version.revision"] = version['revision']
	properties["version.formatted.gnu"] = getVersionFormattedGnu(version)
	properties["version.formatted.win"] = getVersionFormattedWin(version)
	properties["tag"] = getPackageTag()
	properties["buildhost.platform"] = platform.platform()
	properties["buildhost.system"] = platform.system()
	properties["buildhost.release"] = platform.release()
	properties["buildhost.version"] = platform.version()
	properties["buildhost.hostname"] = gethostname()

	if isGit():
		properties["git.revision"] = getGitRevision();
		properties["git.revision.short"] = getGitRevision()[0:7];

	properties["project.title"] = cfgparser.get("project", "title")

	return properties

if args.incrementMajor:
	version['major'] = version['major'] + 1
	saveVersion()

if args.incrementMinor:
	version['minor'] = version['minor'] + 1
	saveVersion()

properties = dict()
version = getVersion()
handler = fileHandlers[args.format]

if args.newBuild:
	handler.write(buildProperties());

	if not args.quiet:
		print(handler.toString())

	printInfo("Wrote file: " + handler.getFilename());

else:
	properties = handler.read()

	if args.key:
		if args.key in properties:
			print(properties[args.key])
		else: 
			print(args.key + " was not found.");
	else:
		if handler.fileExists():
			if not args.quiet:
				print(handler.toString())
		else:
			print("There is no buildid file. Use -n to create a new build.")
